#!/usr/bin/env ruby

#--
#
# Copyright (c) 2014 Stephen Gaito
#
# Permission is hereby granted, free of charge, to any person obtaining 
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:
#
# The above copyright notice and this permission notice shall be 
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, 
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND 
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
# BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
# ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE. 
#
# ++


# based on ideas taken from: 
# Encrypting and decrypting some data
# at: http://www.ruby-doc.org/stdlib-1.9.3/libdoc/openssl/rdoc/OpenSSL/Cipher.html
# see also:
# http://www.ruby-doc.org/stdlib-1.9.3/libdoc/openssl/rdoc/OpenSSL/PKCS5.html

require 'rake'
require 'rake/extensions.rb'; # provides mesg used by others
require 'rake/config.rb';
require 'rake/cookUtils';

if ARGV.length < 1 then
  puts "usage: cookDecrypt <<cypher text file to decrypt>>.enc";
  exit(-1);
end

# check to ensure the file name conforms to our naming conventions...
#
if ARGV[0] !~ /\.enc$/ then
  puts "The file to be decrypted (#{ARGV[0]}) MUST have the file extension '.enc'";
  exit(-1);
end

# check to make sure the file exists...
#
if !File.exists?(ARGV[0]) then
  puts "The file to be decrypted (#{ARGV[0]}) does not exist";
  exit(-1);
end

# Ensure the configuration has been loaded...
Rake.application.raw_load_rakefile;

decrypted = "";
begin
  decrypted = gpgDecryptFile2Data(ARGV[0]);
rescue CookDecryptionError => e
  puts "Failed decryption using GnuPG";
  puts "(#{e.message})...";
  puts "\ntrying OpenSSL...";
  decrypted = openSslDecryptFile2Data(ARGV[0]);
end

File.open(ARGV[0].sub(/\.enc/,'.dec'),'w') do | decryptedFile |
  decryptedFile.puts decrypted;
end
