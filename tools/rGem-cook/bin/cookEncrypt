#!/usr/bin/env ruby

#--
#
# Copyright (c) 2014 Stephen Gaito
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
# BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
# ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
# ++

# based on ideas taken from: 
# Encrypting and decrypting some data
# at: http://www.ruby-doc.org/stdlib-1.9.3/libdoc/openssl/rdoc/OpenSSL/Cipher.html
# see also:
# http://www.ruby-doc.org/stdlib-1.9.3/libdoc/openssl/rdoc/OpenSSL/PKCS5.html

require 'rake'
require 'rake/extensions.rb'; # provides mesg used by others
require 'rake/config.rb';
require 'rake/cookUtils';

if ARGV.length < 1 then
  puts "usage: cookEncrypt <<plain text file to encrypt>>.dec";
  exit(-1);
end

# check to ensure the file name conforms to our naming conventions...
#
if ARGV[0] !~ /\.dec$/ then
  puts "The file to be encrypted (#{ARGV[0]}) MUST have the file extension '.dec'";
  exit(-1);
end

# check to make sure the file exists...
#
if !File.exists?(ARGV[0]) then
  puts "The file to be encrypted (#{ARGV[0]}) does not exist";
  exit(-1);
end

# get the plain text...
#
plainText = File.open(ARGV[0]).read;

# Ensure the configuration has been loaded...
Rake.application.raw_load_rakefile;

# encrypt the file...
#
begin
  gpgEncryptData2File(plainText, ARGV[0].sub(/\.dec/,'.enc'));
rescue CookEncryptionError => e
  puts "Failed to encrypt using GnuPG";
  puts "(#{e.message})...";
  puts "\ntrying OpenSSL...";
  openSslEncryptData2File(plainText, ARGV[0].sub(/\.dec/,'.enc'));
end

##
# Returns +true+ if the +program+ executable is found in the user's path.
# Taken from: http://stackoverflow.com/questions/2108727/which-in-ruby-checking-if-program-exists-in-path-from-ruby/3380168#3380168
#
def has_program?(program)
  ENV['PATH'].split(File::PATH_SEPARATOR).any? do |directory|
    File.executable?(File.join(directory, program.to_s))
  end
end

if File.exists?(ARGV[0]) then
  if has_program?('srm') then
    puts "srm (secure remove) may require more entropy... so please move the mouse";
    system("srm -v #{ARGV[0]}");
  else
    puts "if you had 'srm' installed then we could more securely remove the decrypted passwords in the file #{ARGV[0]}";
    system ("rm #{ARGV[0]}");
  end
end
