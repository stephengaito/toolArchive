-- A Lua script

-- This lms Lua script creates the targets required to build, diff or 
-- install a literate programming project. 

litProgs     = litProgs     or { }
lms.litProgs = lms.litProgs or { }

-- no module defaults

litProgs = hMerge(lms.litProgs, litProgs)

local function compileLitProg(lpDef, onExit)
  --
  -- build the litProg output using simple one context pass...
  --
  executeCmdIn(
    lpDef.target,
    'context --nonstopmode --mode=codeOnly --once '..lpDef.absMainDoc,
    makePath{ projectDir, lpDef.buildDir },
    function(code, signal)
      --
      -- remove the PDF file since we only want the litProg output
      --
      --os.remove(lpDef.absMainDoc:gsub('%.tex$', '.pdf')) 
      --
      onExit(code, signal)
    end
  )
end

local function installTarget(aDef, installDir, aFile)
  local buildTarget     = makePath{ aDef.buildDir, aFile } 
  local installedTarget = makePath{ dirPrefix, installDir, aFile }
  local parentPath = getParentPath(installedTarget)
  ensurePathExists(parentPath)
  appendToMainTarget(installedTarget, 'install')
  target(hMerge(aDef, {
    target       = installedTarget,
    dependencies = {
      buildTarget,
      parentPath
    },
    command      = 'cp '..buildTarget..' '..installedTarget,
    commandName  = 'LitProgs::installedTarget (shell command)'
  }))
  
  appendToClean(buildTarget)
end

-- This assumes that installTarget has been run...
-- This target is used to see how much the new version (in the build 
-- directory) differs from the old version (in the installed location).
-- As such we do NOT want to install the new version just yet!
local function diffTarget(aDef, installDir, aFile)
  local buildTarget = makePath{ aDef.buildDir, aFile } 
  local diffTarget      = 'diff-'..dirPrefix..'-'..aFile
  local installedTarget = makePath{ dirPrefix, installDir, aFile }
  aInsertOnce(diffTargets, diffTarget)
  target(hMerge(aDef, {
    target       = diffTarget,
    dependencies = { buildTarget },
    command      = 'diff '..buildTarget..' '..installedTarget,
    commandName  = 'LitProgs::diffTarget (shell command)'
  }))
end

function litProgs.targets(defaultDef, lpDef)

  lpDef = hMerge(defaultDef, lpDef or { })
  lpDef.creator = 'litProgs-targets'

  lpDef.docFiles = nil
  findDocumentsIn(
    lpDef,
    'docFiles',
    ".*\\.tex\\|.*Bib\\.lua",
    { lpDef.docDir }
  )

  lpDef.compileLitProg = compileLitProg
  lpDef.installTarget  = installTarget
  lpDef.diffTarget     = diffTarget

--  aInsertOnce(lpDef.directories, makePath { lpDef.buildDir, prefixDir })
  for i, aDir in ipairs(lpDef.directories) do
    local aLitProgDir = makePath{lpDef.buildDir, aDir}
    ensurePathExists(aLitProgDir)
    aInsertOnce(lpDef.dependencies, aLitProgDir)
  end

  local litProgsMainDoc = 'litProgs-'..dirPrefix..'-'..lpDef.mainDoc
  
  lpDef.autoGenerated = lpDef.autoGenerated or { }
  local autoGenerated = lpDef.autoGenerated
  for aSrcType, someSrcFiles in pairs(autoGenerated) do
    lpDef[aSrcType] = lpDef[aSrcType] or { }
    local lpDefSrcType = lpDef[aSrcType]
    for i, aSrcFile in ipairs(someSrcFiles) do
      aInsertOnce(lpDefSrcType, aSrcFile)
      local buildTarget = makePath{ lpDef.buildDir, aSrcFile }
      local parentPath  = getParentPath(buildTarget)
      if parentPath then
        ensurePathExists(parentPath)
        aInsertOnce(lpDef.dependencies, parentPath)
      end
      if not getTargetFor(buildTarget) then
        target(hMerge(lpDef, {
          target       = buildTarget,
          dependencies = { litProgsMainDoc }
        }))
      end
    end
  end

  local absMainDocPath = 
    makePath{ lfs.currentdir(), lpDef.docDir, lpDef.mainDoc }  
  
  target(hMerge(lpDef, {
    target      = litProgsMainDoc,
    absMainDoc  = absMainDocPath,
    noOutput    = true,
    command     = compileLitProg,
    commandName = 'LitProgs::compileLitProg'
  }))

  installTarget(lpDef, '', 'lmsfile')
  diffTarget(lpDef, '', 'lmsfile')
    
  return lpDef
end
