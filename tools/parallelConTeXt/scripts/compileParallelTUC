#!/usr/bin/env lua5.4

-- This Lua (v5.4) script compiles the parallel TUC (and plua) files into a 
-- unified TUC for a given ConTeXt job. 

-- Setup the jobName provided by the user.

if arg[1] == nil then
  print("usage: compileParallelTUC <<jobName>>")
  os.exit(-1)
end
jobName = arg[1]

-- Load the MkIV lua files required to implement the ConTeXt job 
-- subsystem. 

homeDir     = os.getenv('HOME') or ""
pcontextDir = homeDir..'/.config/pcontext'

-- Now require any additional lua modules we might need.

pprint = require('pprint')

pContextStructData = dofile(jobName..".plua")
currentPageOffset  = 0
pContextTUCData    = { }
pContextData       = { }

-- load the ConTeXt related "base" Lua code
--
dofile(pcontextDir..'/context/contextLoader.lua')
tSerialize = table.serialize -- from ConTeXt mkiv l-table.lua
sFormat    = string.format

-- Now load the pContext related Lua code
--
dofile(pcontextDir..'/pContext/pContextLoader.lua')

print("working on "..jobName)

job.loadData(jobName, jobName..".tuc")


for i, subDocName in ipairs(pContextStructData.subDocOrder) do
  print("------------------------------------------------------")
  print("loading  "..subDocName)
  print("------------------------------------------------------")
  job.loadData(subDocName)
end

for i, subDocName in ipairs(pContextStructData.subDocOrder) do
  print("------------------------------------------------------")
  print("handling "..subDocName)
  print("------------------------------------------------------")
  job.handleData(subDocName)
end

for i, subDocName in ipairs(pContextStructData.subDocOrder) do
  print("------------------------------------------------------")
  print("saving   "..subDocName)
  print("------------------------------------------------------")
  local oldFileName = sFormat("%s-parallel.tuc", subDocName)
  local newFileName =
    sFormat("%s-parallel-%d.tuc", subDocName, pContextStructData.lastRun)
  if lfs.attributes(oldFileName) then  os.rename(oldFileName, newFileName) end
  job.save(subDocName)
  job.writeTex(subDocName)
end

local function savePContextStructDataAsPluaFile()
  local oldFileName = sFormat("%s.plua", jobName)
  local newFileName =
    sFormat("%s-%d.plua", jobName, pContextStructData.lastRun)
  if lfs.attributes(oldFileName) then  os.rename(oldFileName, newFileName) end
  local f = io.open(oldFileName, 'w')
  if f then
    f:write("-- This is the plua data file for the Parallel ConTeXt build of "..jobName.."\n")
    f:write("-- This file has been autogenerated -- do not edit\n\n")
  
    f:write("local pcontext       = { }\n\n")

    f:write("pcontext.jobName=\""..jobName.."\"\n\n")
    
    f:write(sFormat("pcontext.lastRun=%d\n\n", pContextStructData.lastRun + 1) )
  
    f:write(sFormat("pcontext.randomseed=%f\n\n", pContextStructData.randomseed ) )
    
    f:write(tSerialize(pContextStructData.subDocOrder, "pcontext.subDocOrder", true), "\n\n")
  
    f:write(tSerialize(pContextStructData.subDocs, "pcontext.subDocs", true), "\n\n")
    
    f:write(tSerialize(pContextStructData.cmdList, "pcontext.cmdList", true), "\n\n")
  
    f:write("return pcontext")
    f:close()
  end
end

savePContextStructDataAsPluaFile()

local function saveDataAsLuaFile(fileName, message, data)
  local oldFileName = sFormat("%s.lua", fileName)
  local newFileName =
    sFormat("%s-%d.lua", fileName, pContextStructData.lastRun)
  if lfs.attributes(oldFileName) then  os.rename(oldFileName, newFileName) end
  local f = io.open(oldFileName, 'w')
  f:write(format("-- %s\n\n", message))
  local function writeData(...) 
    f:write(...)
  end
  pprint.pformat(data, nil, writeData)
end

saveDataAsLuaFile("pContextTUCData", "pContextTUCData", pContextTUCData)
saveDataAsLuaFile("pContextData", "pContextData", pContextData)
saveDataAsLuaFile("pContextStructData", "pContextStructData", pContextStructData)








