# This is a collection of utilities used by the main CMake file
#
# A good (simple) overview of the use of CMake can be found at:
#   http://mirkokiefer.com/blog/2013/03/cmake-by-example/
#
# Then slightly more detail can be found at:
#   http://www.cmake.org/cmake-tutorial/
#
# With a multi-(sub)-project structure we need to use project import/export
# This has a good overview at:
#   http://www.cmake.org/Wiki/CMake/Tutorials/Exporting_and_Importing_Targets
#
# and the following for installation:
# http://www.cmake.org/cmake/help/v2.8.12/cmake.html#command:install


# Set up our standard custom targets
#
function(setupStandardTargets)
  add_custom_target(bin)
  add_custom_target(lib)
  add_custom_target(tests)
  add_custom_target(release)
  add_dependencies(release tests)
  add_dependencies(bin lib)

  message("--")
  message("Installation prefix:")
  message("  ${CMAKE_INSTALL_PREFIX}")
  message("--")
  message("System install paths:")
  message("  ${CMAKE_SYSTEM_INSTALL_PATHS}")
  message("--")
endfunction(setupStandardTargets)

# Set the default build type
#
function(setDefaultBuildType buildType cFlags)
  if (NOT DEFINED CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE ${buildType})
  endif (NOT DEFINED CMAKE_BUILD_TYPE)
  set(CMAKE_C_FLAGS "${cFlags} ${CMAKE_C_FLAGS}" CACHE STRING "" FORCE )
  add_definitions(${CMAKE_C_FLAGS})
endfunction(setDefaultBuildType)

# Load the LLVM utilities
#
macro(loadLLVM)
  if (DEFINED LLVM_DIR)
    find_package(LLVM REQUIRED CONFIG)
    include_directories(${LLVM_INCLUDE_DIRS})
    add_definitions(${LLVM_DEFINITIONS})
    llvm_map_components_to_libnames(llvm_libs support core irreader)
    message(STATUS "Found LLVM ${LLVM_PACKAGE_VERSION}")
    message(STATUS "Using LLVMConfig.cmake in: ${LLVM_DIR}")
  endif(DEFINED LLVM_DIR)
endmacro(loadLLVM)


# Transform source and test files into a format suitable for use with 
# Doxygen.
macro(transformDoxygen)
  add_custom_target(transformDoxygenSrcs
    COMMAND $ENV{HOME}/.cmake/transformDoxygen
      ${CMAKE_SOURCE_DIR}/lib ${CMAKE_SOURCE_DIR}/tests
    WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
    COMMENT "Transforming source and tests for API documentation with Doxygen" VERBATIM
  )
  add_dependencies(doc transformDoxygenSrcs )
endmacro(transformDoxygen)

# Load and Configure Doxygen
#
# add a target to generate API documentation with Doxygen
macro(configureDoxygen)
  find_package(Doxygen)
  if(DOXYGEN_FOUND)
    configure_file(
      ${CMAKE_CURRENT_SOURCE_DIR}/Doxyfile.in 
      ${CMAKE_CURRENT_BINARY_DIR}/Doxyfile
      @ONLY
    )
    file(MAKE_DIRECTORY 
      "${CMAKE_BINARY_DIR}/docs" 
      "${CMAKE_BINARY_DIR}/docs/api"
    )
    add_custom_target(doc
      ${DOXYGEN_EXECUTABLE} 
      ${CMAKE_CURRENT_BINARY_DIR}/Doxyfile
      WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
      COMMENT "Generating API documentation with Doxygen" VERBATIM
    )
  endif(DOXYGEN_FOUND)
endmacro(configureDoxygen)

# DEFINE tests
#
function(defineTestsFor libraryName includeDirectories testLibraries)
  #
  # Collect all of the required include files into the testSources
  #
  list(APPEND testSources "")
  foreach(includeDir IN LISTS includeDirectories)
    file(GLOB_RECURSE includeHeaders "${CMAKE_SOURCE_DIR}/${includeDir}/*.h")
    list(APPEND testSources ${includeHeaders})
  endforeach(includeDir)
  #
  # Now add in the sources from this project/directory
  #
  file(GLOB_RECURSE sourceFiles "*.h" "*.c*" )
  list(APPEND testSources ${sourceFiles})
  list(SORT testSources)
  #
  # Add the test executable
  #
  add_executable("${libraryName}Tests" ${testSources})
  #
  # Add in the compile options
  #
  target_compile_options(${libraryName}Tests
    PRIVATE "-g3")
  target_compile_options(${libraryName}Tests
    PRIVATE "-fsanitize=address")
  target_compile_options(${libraryName}Tests
    PRIVATE "-fno-omit-frame-pointer")
  target_link_libraries(${libraryName}Tests "-fsanitize=address")
  foreach(includeDir IN LISTS includeDirectories)
    target_compile_options("${libraryName}Tests"
      PRIVATE "-I${CMAKE_SOURCE_DIR}/${includeDir}")
  endforeach(includeDir)
  foreach(systemDir IN LISTS CMAKE_SYSTEM_INSTALL_PATHS)
    target_compile_options("${libraryName}Tests" 
      PRIVATE "-I${systemDir}/include")
  endforeach(systemDir)
  target_compile_options("${libraryName}Tests" 
    PRIVATE "-Wall" "-std=c++11")
  #
  # Add in the libraries
  #
  target_link_libraries("${libraryName}Tests" ${libraryName})
  foreach(testLibrary IN LISTS testLibraries)
    target_link_libraries("${libraryName}Tests" ${testLibrary})
  endforeach(testLibrary)
  target_link_libraries("${libraryName}Tests" ${llvm_libs})
  #
  # mark this executable as a test
  #
  add_test(${libraryName} "${libraryName}Tests")
  add_custom_target("${libraryName}RunTests" COMMAND "${libraryName}Tests")
  add_dependencies("${libraryName}RunTests" "${libraryName}Tests")
  add_dependencies(tests "${libraryName}Tests" "${libraryName}RunTests")
endfunction(defineTestsFor)

# DEFINE library
#
function(defineLibrary libraryName sourceDirectory includeDirectories buildDirectory)
  #
  # Collect all of the required include files into the testSources
  #
  list(APPEND librarySources "")
  foreach(includeDir IN LISTS includeDirectories)
    file(GLOB_RECURSE includeHeaders "${CMAKE_SOURCE_DIR}/${includeDir}/*.h")
    list(APPEND librarySources ${includeHeaders})
  endforeach(includeDir)
  #
  # Now add in the sources from this project/directory
  #
  file(GLOB_RECURSE sourceFiles "*.h" "*.c*" )
  list(APPEND librarySources ${sourceFiles})
  #
  # Add the library
  #
  add_library(${libraryName} ${librarySources})
  #
  # Add the compile options
  #
  target_compile_options(${libraryName}
    PRIVATE "-g3")
  target_compile_options(${libraryName}
    PRIVATE "-fsanitize=address")
  target_compile_options(${libraryName}
    PRIVATE "-fno-omit-frame-pointer")
  target_link_libraries(${libraryName} "-fsanitize=address")
  target_compile_options(${libraryName} 
    PRIVATE "-I${CMAKE_SOURCE_DIR}/${sourceDirectory}")
  foreach(includeDir IN LISTS includeDirectories)
    target_compile_options(${libraryName}
      PRIVATE "-I${CMAKE_SOURCE_DIR}/${includeDir}")
  endforeach(includeDir)
  foreach(systemDir IN LISTS CMAKE_SYSTEM_INSTALL_PATHS)
    target_compile_options(${libraryName} PRIVATE "-I${systemDir}/include")
  endforeach(systemDir)
  target_compile_options(${libraryName} PRIVATE "-Wall")
#  target_compile_options(${libraryName} PRIVATE "-Wall" "-std=c++11")
  add_dependencies(lib ${libraryName})
  #
  # now describe how to release/install
  #
  install(TARGETS ${libraryName} ARCHIVE DESTINATION lib)
  install(DIRECTORY "${CMAKE_SOURCE_DIR}/${sourceDirectory}/${libraryName}"
          DESTINATION "include"
          FILES_MATCHING PATTERN "*.h")
  add_custom_target("${libraryName}Release"
                    COMMAND "make" "install"
                    WORKING_DIRECTORY "${CMAKE_BINARY_DIR}/${buildDirectory}")
  add_dependencies(release "${libraryName}Release")
endfunction(defineLibrary)

# DEFINE executable
#
function(defineExecutable executableName sourceDirectories libraries)
  file(GLOB_RECURSE executableSources "*.h" "*.c*" )
  add_executable("${executableName}Bin" ${executableSources} )
  foreach(library IN LISTS libraries)
    target_link_libraries("${executableName}Bin" ${library})
  endforeach(library)
  target_link_libraries("${executableName}Bin" ${executableName})
  target_link_libraries("${executableName}Bin" ${llvm_libs})
  SET_TARGET_PROPERTIES("${executableName}Bin" 
    PROPERTIES OUTPUT_NAME ${executableName})
  add_dependencies(bin "${executableName}Bin")
endfunction(defineExecutable)

